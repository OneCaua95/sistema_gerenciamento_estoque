{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Sistema de Gerenciamento de Estoque\"\n",
        "author:\n",
        "    - Iago Flávio\n",
        "    - Hertz Rafael\n",
        "    - Cauã Wendel\n",
        "format:\n",
        "  revealjs:\n",
        "    theme: dark\n",
        "    transition: slide\n",
        "    slide-number: true\n",
        "    preview-links: auto\n",
        "    incremental: true\n",
        "---\n",
        "\n",
        "\n",
        "# Introdução\n",
        "\n",
        "- Tema do projeto: Sistema de Gerenciamento de Estoque\n",
        "- Implementado em Python\n",
        "- Utiliza funções, classes, listas encadeadas e recursão\n",
        "\n",
        "---\n",
        "\n",
        "## Objetivos do Projeto {auto-animate=true}\n",
        "\n",
        "![](https://img.freepik.com/vetores-premium/conceito-de-sistema-de-controle-de-estoque-gerente-profissional-verificacao-de-mercadorias-e-fornecimento-de-estoque-gerenciamento-de-estoque-com-demanda-de-mercadorias_185038-803.jpg)\n",
        "\n",
        "## Objetivos do Projeto {auto-animate=true}\n",
        "\n",
        ":::{.nonincremental}\n",
        "- Criar um sistema eficiente para gerenciar estoque \n",
        "- Implementar operações básicas: adicionar, remover, atualizar e listar produtos\n",
        "- Utilizar estruturas de dados avançadas (listas encadeadas) para armazenamento\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Estruturas Utilizadas {background-color=#D9CAB3}\n",
        "\n",
        "- **Funções**: Para modularizar o código e melhorar a legibilidade\n",
        "- **Classes**: Para representar produtos e o estoque\n",
        "- **Listas Encadeadas**: Para armazenar os produtos de forma dinâmica\n",
        "- **Recursão**: Para otimizar o código na escrita das funções\n",
        "\n",
        "---\n",
        "\n",
        "## Organização do projeto\n",
        "\n",
        "O projeto foi organizado nos seguintes arquivos:\n",
        "\n",
        "- `linkedlist.py`: Guarda o funcionamento da lista encadeada\n",
        "- `produto.py`: Guarda a classe Product, responsável pelas informações dos produtos\n",
        "- `estoque.py`: Guarda a principal funcionalidade do sistema, a classe Stock\n",
        "- `main.py`: É o coração do sistema de gerenciamento de estoque, que é mostrado ao usuário\n",
        "\n",
        "\n",
        "# Principais classes utilizadas:\n",
        "\n",
        ":::{.nonincremental .fragment .fade-right}\n",
        "- Node\n",
        "- LinkedList\n",
        "- Product\n",
        "- Stock\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Classe Node\n",
        "\n",
        "```python\n",
        "class Node:\n",
        "\n",
        "    def __init__(self, element):\n",
        "        self.element = element\n",
        "        self.next = None\n",
        "```\n",
        "\n",
        "- Representa um nó em uma lista encadeada\n",
        "- Cada nó contém um dado (element) e uma referência (next) para o próximo nó na lista\n",
        "\n",
        "---\n",
        "\n",
        "## Classe LinkedList {auto-animate=\"true\"}\n",
        "\n",
        "```python\n",
        "class LinkedList:\n",
        "\n",
        "    def __init__(self):\n",
        "        self.head: Node = None\n",
        "        self.last: Node = None\n",
        "    \n",
        "    #\n",
        "    # Add an element to final index of list.\n",
        "    #\n",
        "    def add(self, element):\n",
        "        node = Node(element)\n",
        "\n",
        "        #\n",
        "        # Check if the list is empty.\n",
        "        #\n",
        "        if self.is_empty():\n",
        "            self.head = node\n",
        "            self.last = node\n",
        "            return\n",
        "        \n",
        "        self.last.next = node\n",
        "        self.last = node\n",
        "\n",
        "    def remove(self, element):\n",
        "        if self.is_empty():  # Check if the list is empty.\n",
        "            return None\n",
        "\n",
        "        current = self.head\n",
        "        previous = None     # Saving node previous to the node to be removed.\n",
        "\n",
        "        while current is not None:\n",
        "            if current.element == element:\n",
        "                if previous is None: \n",
        "                    self.head = current.next\n",
        "                    if self.head is None:  \n",
        "                        self.last = None\n",
        "                else:  \n",
        "                    previous.next = current.next   # Updating the next so that the previous node to be removed is equal to the next of the node that will be removed.\n",
        "                    if current.next is None:  \n",
        "                        self.last = previous\n",
        "\n",
        "                return element\n",
        "\n",
        "            previous = current\n",
        "            current = current.next\n",
        "\n",
        "        return None\n",
        "\n",
        "    #\n",
        "    # Check if the linked list is empty.\n",
        "    #\n",
        "    def is_empty(self) -> bool:\n",
        "        return self.head is None\n",
        "    \n",
        "    #\n",
        "    # Return an array with all elements.\n",
        "    #\n",
        "    def get_all(self):\n",
        "        elements = []\n",
        "\n",
        "        if self.is_empty():\n",
        "            return elements\n",
        "\n",
        "        node = self.head\n",
        "        while True:\n",
        "            elements.append(node.element)\n",
        "            node = node.next\n",
        "\n",
        "            if node is None:\n",
        "                break\n",
        "        \n",
        "        return elements\n",
        "\n",
        "    #\n",
        "    # Get the first occurrence of element on list.\n",
        "    #\n",
        "    def get(self, element):\n",
        "\n",
        "        if self.is_empty():\n",
        "            return None\n",
        "        \n",
        "        node = self.head\n",
        "        while True:\n",
        "\n",
        "            if node.element == element:\n",
        "                return node.element\n",
        "            \n",
        "            node = node.next\n",
        "            if node is None:\n",
        "                break\n",
        "        \n",
        "        return None\n",
        "```\n",
        "\n",
        "## Classe LinkedList {auto-animate=true}\n",
        "\n",
        "Seus principais métodos são:\n",
        "\n",
        "- `add(self, element)`: Adiciona um novo nó\n",
        "- `remove(self, element)`: Remove um nó\n",
        "- `is_empty(self)`: Verifica se a lista encadeada está vazia\n",
        "- `get_all(self)`: Retorna todos os nós da lista\n",
        "- `get(self, element)`: Busca um nó existente na lista\n",
        "\n",
        "---\n",
        "\n",
        "## Classe Product {auto-animate=\"true\"}\n",
        "\n",
        "```python\n",
        "class Product:\n",
        "\n",
        "    def __init__(self, id, name, category, quantity, price):\n",
        "        self.id = id\n",
        "        self.name = name\n",
        "        self.category = category\n",
        "        self.quantity = quantity\n",
        "        self.price = price\n",
        "```\n",
        "\n",
        "## Classe Product {auto-animate=true}\n"
      ],
      "id": "0f2ff043"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-line-numbers: \"|10|11\"\n",
        "\n",
        "class Product:\n",
        "\n",
        "    def __init__(self, id, name, category, quantity, price):\n",
        "        self.id = id\n",
        "        self.name = name\n",
        "        self.category = category\n",
        "        self.quantity = quantity\n",
        "        self.price = price\n",
        "\n",
        "    def __str__(self) -> str:\n",
        "        return f'Product:[id={self.id}, name={self.name}, category={self.category}, quantity={self.quantity}, price={self.price}]'"
      ],
      "id": "31ce300c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Método mágico __str__: Quando a classe product for chamada em uma função print, ela retornará todas as informações do produto.\n",
        "\n",
        "---\n",
        "\n",
        "## Classe Stock\n",
        "\n",
        "```python\n",
        "class Estoque:\n",
        "    def __init__(self):\n",
        "        self.head = None\n",
        "\n",
        "    def adicionar_produto(self, produto):\n",
        "        # Implementação da adição de produto\n",
        "\n",
        "    def remover_produto(self, id):\n",
        "        # Implementação da remoção de produto\n",
        "\n",
        "    def atualizar_produto(self, id, nova_quantidade):\n",
        "        # Implementação da atualização de produto\n",
        "\n",
        "    def listar_produtos(self):\n",
        "        # Implementação da listagem de produtos\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Demonstração do Código\n",
        "\n",
        "- Mostrar o arquivo-fonte do programa\n",
        "- Executar na IDE preferida\n",
        "- Demonstrar todas as funcionalidades implementadas\n",
        "\n",
        "---\n",
        "\n",
        "## Desafios Enfrentados\n",
        "\n",
        "- Implementação correta da lista encadeada\n",
        "- Trabalho colaborativo usando github através de pull requests\n",
        "- Tratamento de erros e exceções com a função get_action()\n",
        "- Alocação dinâmica do ID dos produtos registrados\n",
        "- Escolha de trabalhar com busca por produtos em lista ao invés de dicionários devido à necessidade da velocidade de leitura do projeto (big(O))\n",
        "\n",
        "---\n",
        "\n",
        "### Implementação correta da lista encadeada\n",
        "\n",
        "Implementamos da seguinte maneira\n",
        "<!--- Colocar imagem aqui --> \n",
        "\n",
        "---\n",
        "\n",
        "## Soluções Adotadas\n",
        "\n",
        "- Estudo aprofundado sobre listas encadeadas\n",
        "- Criação de um sistema de gerenciamento de estoque com funções básicas\n",
        "- Implementação de try/except para tratamento de erros\n",
        "\n",
        "---\n",
        "\n",
        "## Conclusão\n",
        "\n",
        "- Recapitulação dos objetivos alcançados\n",
        "- Aprendizados obtidos durante o desenvolvimento\n",
        "- Possíveis melhorias futuras\n",
        "\n",
        "---\n",
        "\n",
        "## Perguntas?\n",
        "\n",
        "Obrigado pela atenção!"
      ],
      "id": "0f82906d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\User\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}