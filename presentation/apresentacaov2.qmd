---
title: "Sistema de Gerenciamento de Estoque 2.0"
subtitle: "Atualização com Grafos e Tabelas Hash"
author:
    - Iago Flávio
    - Hertz Rafael
    - Cauã Wendel
format:
  revealjs:
    theme: dark
    transition: slide
    slide-number: true
    preview-links: auto
    incremental: true
    embed-resources: true
---

# Introdução

- **Tema do projeto:** Sistema de Gerenciamento de Estoque 2.0
- Implementado em *Python*
- Utiliza tabelas hash e grafos

---

## Objetivos do Projeto {auto-animate=true}

![](https://img.freepik.com/vetores-premium/conceito-de-sistema-de-controle-de-estoque-gerente-profissional-verificacao-de-mercadorias-e-fornecimento-de-estoque-gerenciamento-de-estoque-com-demanda-de-mercadorias_185038-803.jpg)

## Objetivos do Projeto {auto-animate=true}

:::{.nonincremental}
- Criar um **sistema eficiente** para gerenciar estoque 
- Implementar operações básicas: adicionar, remover, atualizar e listar produtos
- Utilizar estruturas de dados avançadas (na versão 2.0, são tabelas hash e grafos) para armazenamento
:::

---

## Estruturas Utilizadas {background-color=#D9CAB3}

- **Funções**: Para modularizar o código e melhorar a legibilidade
- **Classes**: Para representar produtos e o estoque
- **Tabelas Hash**: Para acessar de maneira rápida os produtos
- **Grafos**: Para trabalhar com os produtos de forma dinâmica
- **Recursão**: Para otimizar o código das funções

---

## Organização do projeto {auto-animate=true .scrollable}

- O projeto foi organizado nos seguintes arquivos:

  - `graph.py`: Guarda o funcionamento da tabela hash e dos grafos
  - `produto.py`: Guarda a classe Product, responsável pelas informações dos produtos
  - `estoque.py`: Guarda a principal funcionalidade do sistema, a classe Stock
  - `main.py`: É o coração do sistema de gerenciamento de estoque, que é mostrado ao usuário

- Criamos um [guia](guia.pdf), contendo as principais missões de cada membro da equipe

. . .

```Markdown
`init` -> hertz
`generate_id` -> cauã
`get_product()` -> iago
`add_product()` -> cauã
`remove_product()` -> hertz
`update_product()` -> iago
`get_products_by_category()` -> iago
`order_by_quantity()` -> hertz
```

- Utilizamos o [GitHub](https://github.com/iagonmic/sistema_gerenciamento_estoque.git) para versionamento de código

. . .

```Markdown
# Controle de Versão com GitHub

## Configuração Inicial

Clone o repositório localmente:
   
   git clone (link_do_repositório)
   

## Fluxo de Trabalho

1. Criar uma branch para cada nova feature:

   git checkout -b feature/adicionar-produto


2. Fazer commits frequentes com mensagens descritivas:

   git commit -m "Implementa função de adicionar produto"


3. Fazer um push para o GitHub:

   git push origin feature/adicionar-produto


4. Abrir um Pull Request para revisão do código

## Documentação de Erros

1. Usar as Issues do GitHub para rastrear erros
2. Ao encontrar um bug:
   - Criar uma nova Issue descrevendo o problema
   - Adicionar labels relevantes (ex: "bug", "high-priority")
   - Atribuir a um membro da equipe, ou você mesmo caso seja o responsável

3. Ao resolver um bug:
   - Referenciar o número da Issue no commit:

     git commit -m "Corrige erro na atualização de quantidade (#42)"

   - Fechar a Issue através do Pull Request ou manualmente
```

- Além disso, foi utilizado também a linguagem Quarto (.qmd) junto de seu plugin no VS Code para produção dos slides e do guia.

# Principais classes utilizadas:

:::{.nonincremental .fragment .fade-right}
- Node
- Graph
- Product
- Stock
:::

---

## Classe Node

```python
class Node:

    def __init__(self, element):
        self.element = element
        self.next = None
```
. . .

:::{.nonincremental}
- Representa um nó em um grafo
- Cada nó é um produto do grafo não ordenado, contendo suas arestas que se ligam a todos os outros produtos
:::

---

## Classe Graph {auto-animate="true"}

```python
class Graph:

    def __init__(self):
        self.structure = {}

    def get_nodes(self, origin):
        if origin in self.structure:
            return self.structure.get(origin)
        
        return []
    
    def add_node(self, origin, end, ordered: bool = False):
        nodes = self.get_nodes(origin)
        nodes.append(end)
        
        self.structure[origin] = nodes

        if not ordered:
            self.add_node(end, origin, True)

    def contains_node(self, origin):
        if origin in self.structure:
            return True
        return False

    def remove_node(self, origin, ordered: bool = False):
        if self.contains_node(origin):
            origin_nodes = self.get_nodes(origin)  
            self.structure.pop(origin)

            if not ordered:
                for node in origin_nodes:
                    if self.contains_node(node):
                        node_nodes = self.get_nodes(node)
                        node_nodes.remove(origin)

                        self.structure[node] = node_nodes
```

## Classe Graph {auto-animate=true}

# TODO:

Seus principais métodos são:

- `add(self, element)`: Adiciona um novo nó
- `remove(self, element)`: Remove um nó
- `is_empty(self)`: Verifica se a lista encadeada está vazia
- `get_all(self)`: Retorna todos os nós da lista
- `get(self, element)`: Busca um nó existente na lista

---

## Classe Product {auto-animate="true"}

```python
class Product:

    def __init__(self, id, name, category, quantity, price):
        self.id = id
        self.name = name
        self.category = category
        self.quantity = quantity
        self.price = price
```

## Classe Product {auto-animate=true}

```python
class Product:

    def __init__(self, id, name, category, quantity, price):
        self.id = id
        self.name = name
        self.category = category
        self.quantity = quantity
        self.price = price

    def __str__(self) -> str:
        return f'Product:[id={self.id}, name={self.name}, category={self.category}, quantity={self.quantity}, price={self.price}]'
```
Método mágico `__str__`: Quando a classe product for chamada em uma função print, ela retornará todas as informações do produto.

---

## Classe Stock

É a maior classe, contendo as funções principais do projeto

```python
from linkedlist import LinkedList
from produto import Product

class Stock:

    def __init__(self):
        self.stock = LinkedList()
        self.current_id = 0
        self.update_actions = [
            { 
                "action": "1",
                "description": "Alterar o nome do produto.", 
                "function": lambda product, new_value: setattr(product, 'name', new_value)
            },
            { 
                "action": "2", 
                "description": "Alterar a categoria do produto.", 
                "function": lambda product, new_value: setattr(product, 'category', new_value)
            },
            { 
                "action": "3", 
                "description": "Alterar a quantidade do produto.", 
                "function": lambda product, new_value: setattr(product, 'quantity', int(new_value))
            },
            { 
                "action": "4", 
                "description": "Alterar o preço do produto.", 
                "function": lambda product, new_value: setattr(product, 'price', float(new_value))
            }
        ]

    # Gerando ID novo a cada criação
    def generate_id(self):
        self.current_id += 1

        return self.current_id

    #
    # Get product if exists, else return None
    #
    def get_product(self, id):

        ## Get all existent products in stock
        all_products = self.stock.get_all()

        ## Find existent product in stock by ID
        for product in all_products:
            if id == product.id:
                return product
            
        return None

    def add_product(self, name, category, quantity, price):
        id = self.generate_id()
        new_product = Product(id, name, category, quantity, price)

        self.stock.add(new_product)
        print(f"Produto {name} adicionado com sucesso.")

    def remove_product(self, id):
        product = self.get_product(id)

        if product is None:
            print("Produto não encontrado.")
            return
        
        self.stock.remove(product)
        print(f"Produto '{product.name}' removido com sucesso.")

    def update_product(self, id):
        product = self.get_product(id)
        if product is None:
            return
        
        for action in self.update_actions:
            print(f"{action['action']}: {action['description']}")
        
        action_command = input("Insira o número de qual campo acima você quer alterar: ")
        
        action_object = None
        for action in self.update_actions:
            if action['action'] == action_command:
                action_object = action
        
        if action_object is None:
            print(f"Você inseriu uma ação inválida.")
            self.update_product(id)
            return

        new_value = input("Insira o novo valor para o campo informado: ")
        action_object['function'](product, new_value)


    # Get product if exists by name, else return none
    def get_product_by_name(self, name):
        all_products = self.stock.get_all()
        transformed_name = name.strip().lower()

        for product in all_products:
            if transformed_name == product.name:
                return product
        
        return None

    def get_products_by_category(self, category):
        products = []

        all_products = self.stock.get_all()
        transformed_category = category.strip().lower()

        for product in all_products:
            if transformed_category == product.category:
                products.append(product)
        
        return products

    #
    # Get all products from stock
    #
    def get_all_products(self): 
        return self.stock.get_all()

    #
    # Order by quantity from highest to lowest if stock is not empty
    #
    def order_by_quantity(self):

        if self.stock.is_empty():
            return None

        ## Get all existent produts in stock
        all_products = self.stock.get_all()

        ## Initialize ordered list
        ordered_list = []

        ## Search in all of the products list and return
        for i in range(len(all_products)):
            highest = None

            for product in all_products:
                if highest == None or product.quantity >= highest.quantity:
                    highest = product
                
            ordered_list.append(highest)
            all_products.remove(highest)

        return ordered_list
```

# Demonstração do Código

---

## Desafios Enfrentados e Soluções Adotadas {auto-animate=true}

Implementação correta da lista encadeada através das classes `Stock` e `LinkedList`, onde a classe `Stock` utiliza dos métodos da `LinkedList` para funcionar, além da classe `Product`
  
```python
from linkedlist import LinkedList
from produto import Product

class Stock:
```

## Desafios Enfrentados e Soluções Adotadas {auto-animate=true .scrollable}

Trabalho colaborativo usando `github` através de pull requests
![](print_github.png)

## Desafios Enfrentados e Soluções Adotadas {auto-animate=true}

Tratamento de erros e exceções com a função `get_product_by_name()` e `get_product_by_category()` na classe `Stock`

```python
    # Get product if exists by name
    def get_product_by_name(self, name):
        all_products = self.stock.get_all()
        transformed_name = name.strip().lower()

        for product in all_products:
            if transformed_name == product.name:
                return product
        
        return None
    
    # Get list of products if exists by category
    def get_products_by_category(self, category):
        products = []

        all_products = self.stock.get_all()
        transformed_category = category.strip().lower()

        for product in all_products:
            if transformed_category == product.category:
                products.append(product)
        
        return products
```

## Desafios Enfrentados e Soluções Adotadas {auto-animate=true .scrollable}

Tratamento de erros e exceções com a função `get_product_by_name()` e `get_product_by_category()` na classe `Stock`

Exemplo: o usuário pode inserir o nome "CaChoRRO". Se tiver apenas um item escrito "cachorro", ele não vai encontrar, pois precisa digitar exatamente como está, com letras minúsculas e sem espaços.

Porém, ao adicionarmos o `.strip()` (remove espaços) e o `.lower()` (deixa todas as letras minúsculas), que são métodos de string, resolvemos esse problema, e o usuário pode encontrar o que deseja.

```{.python code-line-numbers="4,17"}
    # Get product if exists by name
    def get_product_by_name(self, name):
        all_products = self.stock.get_all()
        transformed_name = name.strip().lower()

        for product in all_products:
            if transformed_name == product.name:
                return product
        
        return None
    
    # Get list of products if exists by category
    def get_products_by_category(self, category):
        products = []

        all_products = self.stock.get_all()
        transformed_category = category.strip().lower()

        for product in all_products:
            if transformed_category == product.category:
                products.append(product)
        
        return products
```


## Desafios Enfrentados e Soluções Adotadas {auto-animate=true}

**Alocação dinâmica do ID dos produtos registrados:**

Através da função `generate_id()`, conseguimos gerar dinamicamente o ID dos novos produtos, evitando que seja necessário inserir o ID na hora de cadastrar um novo produto no estoque

```python
class Stock:

    # Gerando ID novo a cada criação
    def generate_id(self):
        self.current_id += 1

        return self.current_id

    # Adicionar um produto
    def add_product(self, name, category, quantity, price):
        id = self.generate_id()
        new_product = Product(id, name, category, quantity, price)

        self.stock.add(new_product)
        print(f"Produto {name} adicionado com sucesso.")
```

## Desafios Enfrentados e Soluções Adotadas {auto-animate=true .scrollable}

Escolha de trabalhar com atualização por produtos em dicionários ao invés de listas devido a possibilidade do uso de BIG DATA (grandes quantidades de dados)

Nesse caso, registramos a ação `self.update_actions` dentro do `init`

```{.python code-line-numbers="1-10,38,39,40"}
def main():
    stock = Stock()

    while True:
        action = input(
            "Digite 1 - para adicionar, remover ou atualizar produtos,\n"
            "Digite 2 - para buscar produto, por categoria, por quantidade,\n"
            "Digite 3 - para listar os produtos,\n"
            "Digite Q - para sair."
            ).upper()

        print("-" * 60)

        if action == "1":
            while True:
                subaction = input(
                    "Digite 1 - para adicionar um produto,\n"
                    "Digite 2 - para remover um produto,\n"
                    "Digite 3 - para atualizar um produto,\n"
                    "Digite Q - para sair."
                    ).upper()
                
                print("-" * 60)
            
                if subaction == "1":    
                    name = input("Digite o nome do produto: ")
                    category = input("Digite a categoria do produto: ")
                    quantity = int(input("Digite a quantidade do produto: "))
                    price = float(input("Digite o preço do produto: "))
                    stock.add_product(name, category, quantity, price)
                    print("-" * 60)

                elif subaction == "2":
                    id = int(input("Digite o ID do produto a ser removido: "))
                    stock.remove_product(id)
                    print("-" * 60)

                elif subaction == "3":
                    product_id = int(input("Digite o id do produto a ser atualizado: "))
                    stock.update_product(product_id)

                elif subaction == "Q":
                    break

                else:
                    print("Ação inválida.")
```

```{.python code-line-numbers="1-3,6-27"}
class Stock:

    def __init__(self):
        self.stock = LinkedList()
        self.current_id = 0
        self.update_actions = [
            { 
                "action": "1",
                "description": "Alterar o nome do produto.", 
                "function": lambda product, new_value: setattr(product, 'name', new_value)
            },
            { 
                "action": "2", 
                "description": "Alterar a categoria do produto.", 
                "function": lambda product, new_value: setattr(product, 'category', new_value)
            },
            { 
                "action": "3", 
                "description": "Alterar a quantidade do produto.", 
                "function": lambda product, new_value: setattr(product, 'quantity', int(new_value))
            },
            { 
                "action": "4", 
                "description": "Alterar o preço do produto.", 
                "function": lambda product, new_value: setattr(product, 'price', float(new_value))
            }
        ]
```

## Desafios Enfrentados e Soluções Adotadas {auto-animate=true .scrollable}

Tivemos o cuidado de atualizar a parte de update por causa do grafo não ordenado, acessando primeiramente os produtos através da tabela hash e em seguida atualizando todas as ligações, mantendo o produto atualizado em todos os lugares.

```{.python code-line-numbers="22-23,25-32"}
def update_product(self, id):
        product = self.get_product(id)

        if product is None:
            return
        
        for action in self.update_actions:
            print(f"{action['action']}: {action['description']}")
        
        action_command = input("Insira o número de qual campo acima você quer alterar: ")
        
        action_object = None
        for action in self.update_actions:
            if action['action'] == action_command:
                action_object = action
        
        if action_object is None:
            print(f"Você inseriu uma ação inválida.")
            self.update_product(id)
            return

        new_value = input("Insira o novo valor para o campo informado: ")
        action_object['function'](product, new_value)

        # --- Graph --- #
        all_products = self.stock.structure.keys()

        for key in all_products:
            nodes = self.stock.get_nodes(key)
            for node in nodes:
                if node == product:
                    action_object['function'][node, new_value]
```


# Conclusão

- Conseguimos criar um sistema de gerenciamento de estoque com funções básicas
- Aprendemos a trabalhar de maneira colaborativa para a construção do projeto
- **Melhorias futuras:**
  - É possível incrementar funções que retornem uma lista de produtos ao invés de um produto apenas, como na função `get_product()` da classe `Stock`
  - Além disso, é possível realizar a criação de um front-end mais robusto, como a hospedagem em um site, junto de um sistema de usuários
  - Podemos também realizar a implementação de um banco de dados para os produtos do estoque, usando um arquivo básico como uma planilha do excel ou um arquivo .csv, podendo no futuro mudar para a linguagem SQL

---

## Perguntas ? {.nostretch}
Obrigado pela atenção!

![](cachorro.png){width=375px}