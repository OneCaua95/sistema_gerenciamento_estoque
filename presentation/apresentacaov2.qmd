---
title: "Sistema de Gerenciamento de Estoque 2.0"
subtitle: "Atualização com Árvore e Busca em Profundidade"
author:
    - Iago Flávio
    - Hertz Rafael
    - Cauã Wendel
format:
  revealjs:
    theme: dark
    transition: slide
    slide-number: true
    preview-links: auto
    incremental: true
    embed-resources: true

mainfont: Consolas
monofont: JetBrains Mono
---

# Introdução

- A versão 2.0 se trata de uma atualização do Sistema de Gerenciamento de Estoque, anteriormente feito em lista encadeada.
- Agora, foi implementado Árvore por Categoria e Busca em Profundidade (DFS) no sistema.

---

## Objetivos da Nova Versão

- Otimizar a **estrutura geral do sistema**, abrindo novas possibilidades ao usar uma estrutura de dados como árvore
- Separação de produtos por categoria e subcategoria
- Implementação do sistema de vendas de produtos, onde se torna possível manipular as vendas de cada produto.

---

## Estrutura Anterior (Lista Encadeada)

![](linkedlist.png)

- Armazenavamos os produtos em cada nó da lista encadeada

---

## Nova Estrutura 2.0 (Árvore) {auto-animate="true"}

![](tree.png)

---

## Nova Estrutura 2.0 (Árvore) {auto-animate="true"}

Aqui temos dois tipos:

1. Categoria -> Armazena outras categorias (que são subcategorias)
2. Categoria Final -> Armazena produtos e não há outra categoria abaixo dela

---

## Organização do projeto {auto-animate="true"}

- O projeto foi organizado nos seguintes arquivos:

  - `tree.py`: Guarda o funcionamento da árvore e do DFS
  - `produto.py`: Guarda a classe Product, responsável pelas informações dos produtos
  - `estoque.py`: Guarda a principal funcionalidade do sistema, a classe Stock
  - `main.py`: É o coração do sistema de gerenciamento de estoque, que é mostrado ao usuário

## Organização do projeto {auto-animate="true"}

- OBS: Na nova versão, substituimos o arquivo `linkedlist.py` pelo `tree.py` com a nova estrutura de dados.

- OBS²: Mantemos a comunicação pelo GitHub, usando Commits e Pull Requests, devido ao sucesso da ferramenta no trabalho colaborativo da versão anterior.

# Metodologia do Projeto

## Classes Abordadas {auto-animate="true"}

As principais classes do projeto são:

:::{.fragment .fade-right}

**Classes Antigas:**

- `Product`: Representa o produto do estoque, contendo suas principais informações como preço, quantidade, id, etc.
- `Stock`: Reformulamos 100% para atender à nova estrutura de dados de árvore e a DFS (busca em profundidade)
- A classe `LinkedList` e a classe `Node` foram removidas na nova versão.
:::
  
## Classes Abordadas {auto-animate="true"}

As principais classes do projeto são:

:::{.fragment .fade-right}

**Classes Novas:**

- `Category`: Representa a categoria ou subcategoria (Ex: Alimentícios).
- `FinalCategory`: Representa a categoria que contêm especificamente os produtos do estoque. (Ex: Frutas, Limpeza)
:::

## Classe `Product`: {auto-animate="true"}

```{.python}
class Product:

    def __init__(self, id, name, category, quantity, price):
        self.id = id
        self.name = name
        self.category = category
        self.quantity = quantity
        self.price = price
        self.sales = 0
    
    def __str__(self) -> str:
        return f'Product:[id={self.id}, name={self.name}, category={self.category.name}, quantity={self.quantity}, price={self.price}, sales={self.sales}]'
    
    def sale(self, amount):
        self.sales += amount
        self.quantity = max(0, self.quantity - amount)
```

## Classe `Product`: {auto-animate="true"}

Na versão 2.0 atualizamos a classe `Product` para registrar a quantidade de vendas, abrindo a possibilidade de calcular porcentagem de vendas em relação à categoria por exemplo.

```{.python code-line-numbers="5-7"}
class Product:

#............#
    
    def sale(self, amount):
        self.sales += amount
        self.quantity = max(0, self.quantity - amount)
```

## Classe `Category`: {auto-animate="true"}

```{.python}
class Category:

    def __init__(self, name, father=None):
        self.name = name
        self.father = father
        self.subcategories = []

        if father != None:
            father.add_subcategory(self)
    
    def add_subcategory(self, category):
        self.subcategories.append(category)

    def get_category_by_father(self, name, father):

        for category in father.subcategories:
            if category.name.strip().lower() == name:
                return category

            if not isinstance(category, FinalCategory):
                found = self.get_category_by_father(name, category)
                if found != None:
                    return found

        return None
    
    def get_category(self, name, default_father):
        transformed_name = name.strip().lower()

        if transformed_name == default_father.name.strip().lower():
            return default_father

        return self.get_category_by_father(transformed_name, default_father)
    
    def get_all_final_categories(self):
        final_categories = []

        self.__found_final_category__(self, final_categories)

        return final_categories
    
    def __found_final_category__(self, father, array):

        for category in father.subcategories:
            if isinstance(category, FinalCategory):
                array.append(category)
                continue
            
            self.__found_final_category__(category, array)

    def __str__(self):
        return f"Category:[name={self.name}]"
```

## Classe `Category`: {auto-animate="true"}

No construtor da classe, temos o nome da categoria, o `father` que é a categoria que está acima dessa categoria, e as `subcategories`, que são as subcategorias abaixo dessa categoria.

```{.python code-line-numbers="3-9"}
class Category:

    def __init__(self, name, father=None):
        self.name = name
        self.father = father
        self.subcategories = []

        if father != None:
            father.add_subcategory(self)

        #............#
```

## Classe `Category`: {auto-animate="true"}

A função `add_subcategory()` adiciona uma subcategoria abaixo da categoria

```{.python code-line-numbers="5-6"}
class Category:

    #............#

    def add_subcategory(self, category):
        self.subcategories.append(category)

    #............#
```

## Classe `Category`: {auto-animate="true"}

As funções `get_category_by_father()` e `get_category()` trabalham juntas buscar categorias dentro da árvore usando busca em profundidade

```{.python code-line-numbers="2-13"}
    #............#
    def get_category_by_father(self, name, father):

        for category in father.subcategories:
            if category.name.strip().lower() == name:
                return category

            if not isinstance(category, FinalCategory):
                found = self.get_category_by_father(name, category)
                if found != None:
                    return found

        return None
    #............#

```

## Classe `Category`: {auto-animate="true"}

As funções `get_category_by_father()` e `get_category()` trabalham juntas buscar categorias dentro da árvore usando busca em profundidade

```{.python code-line-numbers="2-8"}
    #............#
    def get_category(self, name, default_father):
        transformed_name = name.strip().lower()

        if transformed_name == default_father.name.strip().lower():
            return default_father

        return self.get_category_by_father(transformed_name, default_father)
    #............#
```

## Classe `Category`: {auto-animate="true"}

As funções `get_all_final_categories()` e `__found_final_category__()` trabalham juntas para encontrar as categorias finais, que contêm os produtos do estoque, através da busca em profundidade

```{.python code-line-numbers="2-7"}
    #............#
    def get_all_final_categories(self):
        final_categories = []

        self.__found_final_category__(self, final_categories)

        return final_categories
    #............#

```

## Classe `Category`: {auto-animate="true"}

As funções `get_all_final_categories()` e `__found_final_category__()` trabalham juntas para encontrar as categorias finais, que contêm os produtos do estoque, através da busca em profundidade

```{.python code-line-numbers="2-7"}
    #............#
    for category in father.subcategories:
        if isinstance(category, FinalCategory):
            array.append(category)
            continue
            
        self.__found_final_category__(category, array)
    #............#
```

## Classe `FinalCategory`: {auto-animate="true"}

```{.python}
class FinalCategory(Category):

    def __init__(self, name, father=None):
        super().__init__(name, father)
        self.elements = []

    def add_subcategory(self):
        pass

    def add_element(self, element):
        self.elements.append(element)

    def remove_element(self, element):
        self.elements.remove(element)

    def __str__(self):
        return f'Produtos de {self.name}: {self.elements}'
```

## Classe `FinalCategory`: {auto-animate="true"}

No construtor da subclasse, ela contém todos os atributos da classe `Category` através da classe pré-instalada `super()`, adicionando apenas os elementos, que no caso do estoque são os produtos.

```{.python}
class FinalCategory(Category):

    def __init__(self, name, father=None):
        super().__init__(name, father)
        self.elements = []
```

## Classe `FinalCategory`: {auto-animate="true"}

Temos também as funções básicas de adicionar um elemento e remover um elemento, para conseguir adicionar um produto e removê-lo do estoque

```{.python code-line-numbers="2-6"}
    #............#
    def add_element(self, element):
        self.elements.append(element)

    def remove_element(self, element):
        self.elements.remove(element)
    #............#
```
## Classe `Stock`: {auto-animate="true"}

Reformulamos toda a classe `Stock` incluindo novas funcionalidades além das já existentes.

```{.python}
from produto import Product
from tree import Category, FinalCategory

class Stock:

    def __init__(self):
        self.current_id = 0
        self.product_category = Category('Produtos')
        self.update_actions = [
            { 
                "action": "1",
                "description": "Alterar o nome do produto.", 
                "function": lambda product, new_value: setattr(product, 'name', new_value)
            },
            { 
                "action": "2", 
                "description": "Alterar a categoria do produto.", 
                "function": lambda product, new_value: setattr(product, 'category', new_value)
            },
            { 
                "action": "3", 
                "description": "Alterar a quantidade do produto.", 
                "function": lambda product, new_value: setattr(product, 'quantity', int(new_value))
            },
            { 
                "action": "4", 
                "description": "Alterar o preço do produto.", 
                "function": lambda product, new_value: setattr(product, 'price', float(new_value))
            }
        ]
        self.load_categories()
        self.load_products()

    def load_categories(self):
        father = self.product_category

        alimenticios = Category('Alimentícios', father)
        nao_alimenticios = Category('Não Alimentícios', father)

        FinalCategory('Carnes', alimenticios)
        FinalCategory('Frutas', alimenticios)
        FinalCategory('Grãos', alimenticios)
        FinalCategory('Laticínios', alimenticios)

        FinalCategory('Higiene', nao_alimenticios)
        FinalCategory('Limpeza', nao_alimenticios)
        FinalCategory('Beleza', nao_alimenticios)

    def load_products(self):
        self.add_product("Arroz", "Grãos", 20, 10)
        self.add_product("Feijão", "Grãos", 15, 8)
        self.add_product("Macarrão", "Grãos", 12, 5)
        self.add_product("Açúcar", "Grãos", 10, 3)
        self.add_product("Café", "Grãos", 25, 7)
        self.add_product("Óleo de Soja", "Grãos", 18, 9)
        self.add_product("Leite", "Laticínios", 6, 4)
        self.add_product("Queijo", "Laticínios", 28, 3)
        self.add_product("Iogurte", "Laticínios", 10, 4)
        self.add_product("Manteiga", "Laticínios", 13, 7)
        self.add_product("Presunto", "Carnes", 22, 6)
        self.add_product("Bacon", "Carnes", 25, 3)
        self.add_product("Carne Moída", "Carnes", 35, 5)
        self.add_product("Frango", "Carnes", 28, 6)
        self.add_product("Banana", "Frutas", 8, 8)

        self.add_product("Sabão em Pó", "Limpeza", 22, 6)
        self.add_product("Detergente", "Limpeza", 4, 10)
        self.add_product("Desinfetante", "Limpeza", 8, 7)
        self.add_product("Água Sanitária", "Limpeza", 9, 8)
        self.add_product("Amaciante", "Limpeza", 15, 2)
        self.add_product("Papel Higiênico", "Higiene", 12, 9)
        self.add_product("Shampoo", "Higiene", 18, 4)
        self.add_product("Condicionador", "Higiene", 20, 3)
        self.add_product("Creme Dental", "Higiene", 7, 8)
        self.add_product("Sabonete", "Higiene", 5, 10)
        self.add_product("Escova de Dentes", "Higiene", 6, 7)
        self.add_product("Lâmina de Barbear", "Beleza", 16, 4)
        self.add_product("Esmalte", "Beleza", 9, 5)
        self.add_product("Maquiagem", "Beleza", 30, 6)
        self.add_product("Perfume", "Beleza", 50, 3)


    # Gerando ID novo a cada criação
    def generate_id(self):
        self.current_id += 1

        return self.current_id
    
    def get_product(self, id, category=None): # Busca em profundidade (DFS)
        if category == None:
            category = self.product_category

        if isinstance(category, FinalCategory):
            for product in category.elements:
                if product.id == id:
                    return product
                
            return None
        
        for subcategory in category.subcategories:
            product = self.get_product(id, subcategory)
            if product != None:
                return product
        
        return None
    
    def can_insert_items(self, category: Category):
        return isinstance(category, FinalCategory)

    def get_category(self, name):
        return self.product_category.get_category(name, self.product_category)

    def add_product(self, name, category_name, quantity, price):

        category = self.get_category(category_name)
        if category == None:
            print("Categoria não encontrada.")
            return
        
        if not self.can_insert_items(category):
            print("Você não pode inserir elementos nesta categoria.")
            return

        id = self.generate_id()
        new_product = Product(id, name, category, quantity, price)
        category.add_element(new_product)

        print(f"Produto {name} adicionado com sucesso.")

    def remove_product(self, id):
        product = self.get_product(id)

        if product is None:
            print("Produto não encontrado.")
            return
        
        product.category.remove_element(product)

        print(f"Produto '{product.name}' removido com sucesso.")

    def update_product(self, id):
        product = self.get_product(id)

        if product is None:
            return
        
        for action in self.update_actions:
            print(f"{action['action']}: {action['description']}")
        
        action_command = input("Insira o número de qual campo acima você quer alterar: ")
        
        action_object = None
        for action in self.update_actions:
            if action['action'] == action_command:
                action_object = action
        
        if action_object is None:
            print(f"Você inseriu uma ação inválida.")
            self.update_product(id)
            return

        new_value = input("Insira o novo valor para o campo informado: ")
        action_object['function'](product, new_value)

    # Get product if exists by name
    def get_product_by_name(self, name):
        all_products = self.get_all_products()
        transformed_name = name.strip().lower()

        for product in all_products:
            if transformed_name == product.name:
                return product
        
        return None
    
    # Get list of products if exists by category
    def get_products_by_category(self, category_name):
        
        transformed_category_name = category_name.strip().lower()
        category = self.get_category(transformed_category_name)

        products = []

        # First case: category is a final category
        if isinstance(category, FinalCategory):
            for element in category.elements:
                products.append(element)
            
            return products

        # Second case: category is not a final category
        product_categories = category.get_all_final_categories()

        for product_category in product_categories:
            for element in product_category.elements:
                products.append(element)

        return products

    #
    # Get all products from stock
    #
    def get_all_products(self): 
        products = []

        for final_category in self.product_category.get_all_final_categories():
            for element in final_category.elements:
                products.append(element)

        return products
    
    def is_empty(self):
        return not self.get_all_products()

    #
    # Order by quantity from highest to lowest if stock is not empty
    #
    def order_by_quantity(self):

        if self.is_empty():
            return None

        ## Get all existent produts in stock
        all_products = self.get_all_products()

        ## Initialize ordered list
        ordered_list = []

        ## Search in all of the products list and return
        for i in range(len(all_products)):
            highest = None

            for product in all_products:
                if highest == None or product.quantity >= highest.quantity:
                    highest = product
            
            ordered_list.append(highest)
            all_products.remove(highest)

        return ordered_list
    
    def get_products_by_price(self, product_name):
        products = []

        found_product = self.get_product_by_name(product_name)
        price = found_product.price

        difference = 5
        for product in self.get_all_products():
            price_difference = abs(product.price - price)
            if price_difference <= difference:
                products.append(product)
        
        return products
    
    def register_sale(self, product, amount):
        product = self.get_product(product)

        if product == None:
            print("O produto não foi encontrado")
            return
            
        if product.quantity < amount:
            print(f"Você não possui a quantia necessária para vender")
            return
        
        product.sale(amount)
```
## Classe `Stock`: {auto-animate="true"}

Todas as funcionalidades foram reformuladas e algumas novas foram acrescentadas. Dentre essas, temos as seguintes mais importantes:

1. `get_product()` -> Foi completamente reformulada para funcionar com árvore
2. `get_products_by_category()` -> Como as categorias são a base da árvore, tivemos que reformular completamente

## Classe `Stock`: {auto-animate="true"}

Todas as funcionalidades foram reformuladas e algumas novas foram acrescentadas. Dentre essas, temos as seguintes mais importantes:

3. `get_products_by_price()` -> Nova funcionalidade onde é inserido um produto e é retornado uma sequência de produtos que tem preço semelhante
4. `register_sale()` -> Nova funcionalidade onde é registrada a venda de um produto, atualizando sua quantidade no estoque

## Classe `Stock`: {auto-animate="true" .scrollable}

Na funcionalidade `get_product()`, passamos o id do produto e ele começa a realizar a busca em profundidade a partir de uma categoria. Se nenhuma categoria é passada, então começamos pelo topo da árvore, onde tem a categoria principal com todos os produtos `product_category`

```{.python}
def get_product(self, id, category=None): # Busca em profundidade (DFS)
    if category == None:
        category = self.product_category

    if isinstance(category, FinalCategory):
        for product in category.elements:
            if product.id == id:
                return product
            
        return None
    
    for subcategory in category.subcategories:
        product = self.get_product(id, subcategory)
        if product != None:
            return product
    
    return None
```

## Classe `Stock`: {auto-animate="true" .scrollable}

Na funcionalidade `get_product_by_category()`, passamos como parâmetro o nome da categoria, e começamos a buscar as categorias que estão abaixo dessa categoria até chegar em uma categoria final, onde tem os produtos do estoque. Assim, retornamos todos os produtos das categorias finais que são englobadas pela categoria passada.

```{.python}
def get_products_by_category(self, category_name):
        
    transformed_category_name = category_name.strip().lower()
    category = self.get_category(transformed_category_name)

    products = []

    # First case: category is a final category
    if isinstance(category, FinalCategory):
        for element in category.elements:
            products.append(element)
        
        return products

    # Second case: category is not a final category
    product_categories = category.get_all_final_categories()

    for product_category in product_categories:
        for element in product_category.elements:
            products.append(element)

    return products

```
## Classe `Stock`: {auto-animate="true" .scrollable}

Uma das novas funcionalidades é a `get_products_by_price()`, onde passamos um dos produtos do estoque, e buscamos por produtos que tem um preço semelhante. Nesse caso, adotamos uma diferença de 5 reais, ou seja, produtos que tem uma diferença de 5 reais do produto passado na função serão imprimidos.

```{.python}
def get_products_by_price(self, product_name):
        products = []

        found_product = self.get_product_by_name(product_name)
        price = found_product.price

        difference = 5
        for product in self.get_all_products():
            price_difference = abs(product.price - price)
            if price_difference <= difference:
                products.append(product)
        
        return products
```
## Classe `Stock`: {auto-animate="true" .scrollable}

Outra nova funcionalidade é a de `register_sale()`, onde registramos a venda de um produto. Criamos a exceção caso o produto não exista no estoque, ou então caso ele não tenha a quantidade necessária para vendas.

```{.python}
def register_sale(self, product, amount):
    product = self.get_product(product)

    if product == None:
        print("O produto não foi encontrado")
        return
        
    if product.quantity < amount:
        print(f"Você não possui a quantia necessária para vender")
        return
    
    product.sale(amount)
```

# Dificuldades Enfrentadas {auto-animate="true"}

## Dificuldades Enfrentadas {auto-animate="true" .scrollable}

Criação de nova maneira de printar o resultado final: adaptação para o formato de tabela.

```Markdown
Relatório dos produtos
---------------------------------------------------------------------------
|ID   |Nome                |Categoria           |Quantidade  |Preço       |
---------------------------------------------------------------------------
|11   |Presunto            |Carnes              |22          |6           |
|12   |Bacon               |Carnes              |25          |3           |
|13   |Carne Moída         |Carnes              |35          |5           |
|14   |Frango              |Carnes              |28          |6           |
|15   |Banana              |Frutas              |8           |8           |
|1    |Arroz               |Grãos               |20          |10          |
|2    |Feijão              |Grãos               |15          |8           |
|3    |Macarrão            |Grãos               |12          |5           |
|4    |Açúcar              |Grãos               |10          |3           |
|5    |Café                |Grãos               |25          |7           |
|6    |Óleo de Soja        |Grãos               |18          |9           |
|7    |Leite               |Laticínios          |6           |4           |
|8    |Queijo              |Laticínios          |28          |3           |
|9    |Iogurte             |Laticínios          |10          |4           |
|10   |Manteiga            |Laticínios          |13          |7           |
|21   |Papel Higiênico     |Higiene             |12          |9           |
|22   |Shampoo             |Higiene             |18          |4           |
|23   |Condicionador       |Higiene             |20          |3           |
|24   |Creme Dental        |Higiene             |7           |8           |
|25   |Sabonete            |Higiene             |5           |10          |
```

## Dificuldades Enfrentadas {auto-animate="true" .scrollable}

Como agora deve ser feita a criação de várias categorias e subcategorias, implementamos a leitura prévia no estoque de categorias existentes através das funções `load_categories()` e `load_products()` (tipo um banco de dados)

```{.python}
def load_categories(self):
    father = self.product_category

    alimenticios = Category('Alimentícios', father)
    nao_alimenticios = Category('Não Alimentícios', father)

    FinalCategory('Carnes', alimenticios)
    FinalCategory('Frutas', alimenticios)
    FinalCategory('Grãos', alimenticios)
    FinalCategory('Laticínios', alimenticios)

    FinalCategory('Higiene', nao_alimenticios)
    FinalCategory('Limpeza', nao_alimenticios)
    FinalCategory('Beleza', nao_alimenticios)

def load_products(self):
    stock.add_product("Arroz", "Grãos", 10, 45)
    stock.add_product("Feijão", "Grãos", 8, 37)
    stock.add_product("Macarrão", "Grãos", 5, 22)
    stock.add_product("Açúcar", "Grãos", 3, 15)
    stock.add_product("Café", "Grãos", 7, 60)
    stock.add_product("Óleo de Soja", "Grãos", 9, 50)
    stock.add_product("Leite", "Laticínios", 4, 12)
    stock.add_product("Queijo", "Laticínios", 3, 80)
    stock.add_product("Iogurte", "Laticínios", 4, 18)
    stock.add_product("Manteiga", "Laticínios", 7, 40)
    stock.add_product("Presunto", "Carnes", 6, 75)
    stock.add_product("Bacon", "Carnes", 3, 65)
    stock.add_product("Carne Moída", "Carnes", 5, 90)
    stock.add_product("Frango", "Carnes", 6, 85)
    stock.add_product("Banana", "Frutas", 8, 10)

    stock.add_product("Sabão em Pó", "Limpeza", 6, 35)
    stock.add_product("Detergente", "Limpeza", 10, 8)
    stock.add_product("Desinfetante", "Limpeza", 7, 25)
    stock.add_product("Água Sanitária", "Limpeza", 8, 30)
    stock.add_product("Amaciante", "Limpeza", 2, 55)
    stock.add_product("Papel Higiênico", "Higiene", 9, 12)
    stock.add_product("Shampoo", "Higiene", 4, 45)
    stock.add_product("Condicionador", "Higiene", 3, 50)
    stock.add_product("Creme Dental", "Higiene", 8, 18)
    stock.add_product("Sabonete", "Higiene", 10, 5)
    stock.add_product("Escova de Dentes", "Higiene", 7, 14)
    stock.add_product("Lâmina de Barbear", "Beleza", 4, 20)
    stock.add_product("Esmalte", "Beleza", 5, 9)
    stock.add_product("Maquiagem", "Beleza", 6, 80)
    stock.add_product("Perfume", "Beleza", 3, 100)
```

## Dificuldades Enfrentadas {auto-animate="true" .scrollable}

Implementação do método `__str__` em todas as classes para melhor visualização da classe ao printar

```{.python}
class Product:

    def __str__(self) -> str:
        return f'Product:[id={self.id}, name={self.name}, category={self.category.name}, quantity={self.quantity}, price={self.price}, sales={self.sales}]'
```

## Dificuldades Enfrentadas {auto-animate="true" .scrollable}

Implementação do método `__str__` em todas as classes para melhor visualização da classe ao printar

```{.python}
class Category:
    
    def __str__(self):
        return f"Category:[name={self.name}]"
```

## Dificuldades Enfrentadas {auto-animate="true" .scrollable}

Implementação do método `__str__` em todas as classes para melhor visualização da classe ao printar

```{.python}
class FinalCategory(Category):

    def __str__(self):
        return f'Produtos de {self.name}: {self.elements}'
```

## Dificuldades Enfrentadas {auto-animate="true" .scrollable}

Cuidado com a verificação de classe através da função pré-instalada `isinstance(object, class)` em vários lugares do código. A exemplificar:

```{.python code-line-numbers="4"}
    def __found_final_category__(self, father, array):

        for category in father.subcategories:
            if isinstance(category, FinalCategory):
                array.append(category)
                continue
            
            self.__found_final_category__(category, array)
```

# Conclusão

## Considerações

- Conseguimos realizar a atualização do sistema de gerenciamento de estoque para uma estrutura de dados mais avançada como árvore.
- Construímos funcionalidades mais interessantes do que as que existiam na versão anterior, além de melhorar as que já existiam.

## Melhorias Futuras

- Deixar o banco de dados do programa mais robusto para comportar dados maiores ao invés de passar os produtos no construtor da classe `Stock`
- Implementar a busca em largura (`BFS`)
- Construir novas funcionalidades que trabalhem a similaridade entre produtos através das categorias e subcategorias, como a `verificação da porcentagem de vendas de um produto em relação à categoria e ao total.`

# Demonstração do código